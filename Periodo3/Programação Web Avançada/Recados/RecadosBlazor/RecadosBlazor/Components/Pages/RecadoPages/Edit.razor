@page "/Recados/edit"
@inject RecadosBlazor.Data.AppDbContext DB
@using RecadosBlazor.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Recado</h4>
<hr />
@if (Recado is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Recado" OnValidSubmit="UpdateRecado" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Recado.Id" value="@Recado.Id" />
                <div class="mb-3">
                    <label for="mensagem" class="form-label">Mensagem:</label>
                    <InputText id="mensagem" @bind-Value="Recado.Mensagem" class="form-control" />
                    <ValidationMessage For="() => Recado.Mensagem" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="remetente" class="form-label">Remetente:</label>
                    <InputText id="remetente" @bind-Value="Recado.Remetente" class="form-control" />
                    <ValidationMessage For="() => Recado.Remetente" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="destinatario" class="form-label">Destinatario:</label>
                    <InputText id="destinatario" @bind-Value="Recado.Destinatario" class="form-control" />
                    <ValidationMessage For="() => Recado.Destinatario" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/recados">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Recado? Recado { get; set; }//armazena o objeto recado

    protected override async Task OnInitializedAsync()
    {
        Recado ??= await DB.Recados.FirstOrDefaultAsync(m => m.Id == Id);//pega o recado pelo id

        if (Recado is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateRecado()//metodo que foi chamado no form
    {
        DB.Attach(Recado!).State = EntityState.Modified;//atualiza recado no banco

        try
        {
            await DB.SaveChangesAsync();//salva as mudanças no banco
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!RecadoExists(Recado!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/recados");
    }

    bool RecadoExists(int id) //verificando se o recado existe no banco
    {
        return DB.Recados.Any(e => e.Id == id);
    }
}
